/* tslint:disable */
/* eslint-disable */
/**
 * Greenlight api
 * greenlight is a public api for movies
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: islamghany3@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ActivateUserRequest
 */
export interface ActivateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof ActivateUserRequest
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface AuthenticateUser
 */
export interface AuthenticateUser {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateUser
     */
    'password'?: string;
}
/**
 * data required for create a movie
 * @export
 * @interface CreateMovie
 */
export interface CreateMovie {
    /**
     * 
     * @type {string}
     * @memberof CreateMovie
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateMovie
     */
    'year'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateMovie
     */
    'geners'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateMovie
     */
    'runtime'?: string;
}
/**
 * 
 * @export
 * @interface CreateMovie201Response
 */
export interface CreateMovie201Response {
    /**
     * 
     * @type {Movie}
     * @memberof CreateMovie201Response
     */
    'movie'?: Movie;
}
/**
 * 
 * @export
 * @interface CreateMovieRequest
 */
export interface CreateMovieRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateMovieRequest
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateMovieRequest
     */
    'year'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateMovieRequest
     */
    'geners'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateMovieRequest
     */
    'runtime'?: string;
}
/**
 * 
 * @export
 * @interface CreateUser
 */
export interface CreateUser {
    /**
     * 
     * @type {string}
     * @memberof CreateUser
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUser
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface DeleteMovie200Response
 */
export interface DeleteMovie200Response {
    /**
     * 
     * @type {string}
     * @memberof DeleteMovie200Response
     */
    'messgae'?: string;
}
/**
 * email string inside an object
 * @export
 * @interface EmailObject
 */
export interface EmailObject {
    /**
     * 
     * @type {string}
     * @memberof EmailObject
     */
    'email': string;
}
/**
 * Server Error
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface GetCurrentUser200Response
 */
export interface GetCurrentUser200Response {
    /**
     * 
     * @type {User}
     * @memberof GetCurrentUser200Response
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface GetMostLikedMovies200Response
 */
export interface GetMostLikedMovies200Response {
    /**
     * 
     * @type {Array<Movie>}
     * @memberof GetMostLikedMovies200Response
     */
    'movies'?: Array<Movie>;
}
/**
 * 
 * @export
 * @interface GetMovieLikes200Response
 */
export interface GetMovieLikes200Response {
    /**
     * 
     * @type {Like}
     * @memberof GetMovieLikes200Response
     */
    'likes'?: Like;
}
/**
 * 
 * @export
 * @interface HealthCheck200Response
 */
export interface HealthCheck200Response {
    /**
     * 
     * @type {string}
     * @memberof HealthCheck200Response
     */
    'status'?: string;
    /**
     * 
     * @type {Array<HealthCheck200ResponseSystemInfoInner>}
     * @memberof HealthCheck200Response
     */
    'system_info'?: Array<HealthCheck200ResponseSystemInfoInner>;
}
/**
 * 
 * @export
 * @interface HealthCheck200ResponseSystemInfoInner
 */
export interface HealthCheck200ResponseSystemInfoInner {
    /**
     * 
     * @type {string}
     * @memberof HealthCheck200ResponseSystemInfoInner
     */
    'environment'?: string;
    /**
     * 
     * @type {string}
     * @memberof HealthCheck200ResponseSystemInfoInner
     */
    'version'?: string;
}
/**
 * 
 * @export
 * @interface HealthCheck500Response
 */
export interface HealthCheck500Response {
    /**
     * 
     * @type {string}
     * @memberof HealthCheck500Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface Like
 */
export interface Like {
    /**
     * 
     * @type {number}
     * @memberof Like
     */
    'movie_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Like
     */
    'isCurrentUserLiked'?: number;
    /**
     * 
     * @type {number}
     * @memberof Like
     */
    'likes'?: number;
}
/**
 * 
 * @export
 * @interface LikeMovieRequest
 */
export interface LikeMovieRequest {
    /**
     * 
     * @type {number}
     * @memberof LikeMovieRequest
     */
    'movie_id'?: number;
}
/**
 * the meta about a number of items
 * @export
 * @interface MetaData
 */
export interface MetaData {
    /**
     * 
     * @type {number}
     * @memberof MetaData
     */
    'current_page'?: number;
    /**
     * 
     * @type {number}
     * @memberof MetaData
     */
    'page_size'?: number;
    /**
     * 
     * @type {number}
     * @memberof MetaData
     */
    'first_page'?: number;
    /**
     * 
     * @type {number}
     * @memberof MetaData
     */
    'last_page'?: number;
    /**
     * 
     * @type {number}
     * @memberof MetaData
     */
    'total_reocrds'?: number;
}
/**
 * model containg the movie schema
 * @export
 * @interface Movie
 */
export interface Movie {
    /**
     * 
     * @type {number}
     * @memberof Movie
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Movie
     */
    'created_at'?: string;
    /**
     * the runtime of the movie is represented in the database as a normal year but we manipulated it before and after converting it to json to make it a nice string
     * @type {string}
     * @memberof Movie
     */
    'runtime': string;
    /**
     * the categories that the movie belongs
     * @type {Array<string>}
     * @memberof Movie
     */
    'geners': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Movie
     */
    'year': number;
    /**
     * is used to indicate how many times this movies had been changed, it help so that we can make it not in the critical section
     * @type {string}
     * @memberof Movie
     */
    'version'?: string;
    /**
     * the number of the views to this movie
     * @type {number}
     * @memberof Movie
     */
    'count'?: number;
    /**
     * the number of likes on this movie
     * @type {number}
     * @memberof Movie
     */
    'likes'?: number;
    /**
     * the id of the user that has created that movie
     * @type {number}
     * @memberof Movie
     */
    'user_id'?: number;
}
/**
 * a list of movies and metadata about it
 * @export
 * @interface MoviesResponse
 */
export interface MoviesResponse {
    /**
     * 
     * @type {MetaData}
     * @memberof MoviesResponse
     */
    'metadata'?: MetaData;
    /**
     * 
     * @type {Array<Movie>}
     * @memberof MoviesResponse
     */
    'movies'?: Array<Movie>;
}
/**
 * success operation
 * @export
 * @interface SuccessResponse
 */
export interface SuccessResponse {
    /**
     * 
     * @type {string}
     * @memberof SuccessResponse
     */
    'messgae'?: string;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'plaintext'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'Expiry'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'activated'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_at'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isCurrentUser'?: boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * show that if the server is working correctly or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/healthcheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * show that if the server is working correctly or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheck200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * show that if the server is working correctly or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: any): AxiosPromise<HealthCheck200Response> {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * show that if the server is working correctly or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheck(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LikesApi - axios parameter creator
 * @export
 */
export const LikesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get the likes of the specific movie
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieLikes: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMovieLikes', 'id', id)
            const localVarPath = `/likes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * add a like of the specific movie
         * @param {LikeMovieRequest} [likeMovieRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likeMovie: async (likeMovieRequest?: LikeMovieRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/likes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(likeMovieRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * remove a like of the specific movie
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlikeMovie: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unlikeMovie', 'id', id)
            const localVarPath = `/likes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LikesApi - functional programming interface
 * @export
 */
export const LikesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LikesApiAxiosParamCreator(configuration)
    return {
        /**
         * get the likes of the specific movie
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMovieLikes(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMovieLikes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMovieLikes(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * add a like of the specific movie
         * @param {LikeMovieRequest} [likeMovieRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async likeMovie(likeMovieRequest?: LikeMovieRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.likeMovie(likeMovieRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * remove a like of the specific movie
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlikeMovie(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlikeMovie(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LikesApi - factory interface
 * @export
 */
export const LikesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LikesApiFp(configuration)
    return {
        /**
         * get the likes of the specific movie
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieLikes(id: number, options?: any): AxiosPromise<GetMovieLikes200Response> {
            return localVarFp.getMovieLikes(id, options).then((request) => request(axios, basePath));
        },
        /**
         * add a like of the specific movie
         * @param {LikeMovieRequest} [likeMovieRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likeMovie(likeMovieRequest?: LikeMovieRequest, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.likeMovie(likeMovieRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * remove a like of the specific movie
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlikeMovie(id: number, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.unlikeMovie(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LikesApi - object-oriented interface
 * @export
 * @class LikesApi
 * @extends {BaseAPI}
 */
export class LikesApi extends BaseAPI {
    /**
     * get the likes of the specific movie
     * @param {number} id the id of the movie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    public getMovieLikes(id: number, options?: AxiosRequestConfig) {
        return LikesApiFp(this.configuration).getMovieLikes(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * add a like of the specific movie
     * @param {LikeMovieRequest} [likeMovieRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    public likeMovie(likeMovieRequest?: LikeMovieRequest, options?: AxiosRequestConfig) {
        return LikesApiFp(this.configuration).likeMovie(likeMovieRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * remove a like of the specific movie
     * @param {number} id the id of the movie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    public unlikeMovie(id: number, options?: AxiosRequestConfig) {
        return LikesApiFp(this.configuration).unlikeMovie(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MoviesApi - axios parameter creator
 * @export
 */
export const MoviesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create New Movie
         * @param {CreateMovieRequest} createMovieRequest movie data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMovie: async (createMovieRequest: CreateMovieRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMovieRequest' is not null or undefined
            assertParamExists('createMovie', 'createMovieRequest', createMovieRequest)
            const localVarPath = `/movies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMovieRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete Movie
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMovie: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMovie', 'id', id)
            const localVarPath = `/movies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * obtain movies (filtering)
         * @param {string} [title] the title of the movie
         * @param {Array<string>} [geners] an array containg the geners of the movie
         * @param {number} [page] how many pages
         * @param {number} [pageSize] how many movies in one page
         * @param {'title' | '-title' | 'id' | '-id - year' | '-year - runtime' | '-runtime'} [sort] sort the returned array movie depend on these params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMovies: async (title?: string, geners?: Array<string>, page?: number, pageSize?: number, sort?: 'title' | '-title' | 'id' | '-id - year' | '-year - runtime' | '-runtime', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/movies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (geners) {
                localVarQueryParameter['geners'] = geners;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get the most liked movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMostLikedMovies: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/movies/most-likes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get the most viewd movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMostViewedMovies: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/movies/most-views`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * obtain individual movie
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovie: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMovie', 'id', id)
            const localVarPath = `/movies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update Movie
         * @param {number} id the id of the movie
         * @param {CreateMovieRequest} [createMovieRequest] updated movie data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMovie: async (id: number, createMovieRequest?: CreateMovieRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMovie', 'id', id)
            const localVarPath = `/movies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMovieRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MoviesApi - functional programming interface
 * @export
 */
export const MoviesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MoviesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create New Movie
         * @param {CreateMovieRequest} createMovieRequest movie data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMovie(createMovieRequest: CreateMovieRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMovie201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMovie(createMovieRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * delete Movie
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMovie(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteMovie200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMovie(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * obtain movies (filtering)
         * @param {string} [title] the title of the movie
         * @param {Array<string>} [geners] an array containg the geners of the movie
         * @param {number} [page] how many pages
         * @param {number} [pageSize] how many movies in one page
         * @param {'title' | '-title' | 'id' | '-id - year' | '-year - runtime' | '-runtime'} [sort] sort the returned array movie depend on these params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMovies(title?: string, geners?: Array<string>, page?: number, pageSize?: number, sort?: 'title' | '-title' | 'id' | '-id - year' | '-year - runtime' | '-runtime', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoviesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMovies(title, geners, page, pageSize, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get the most liked movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMostLikedMovies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMostLikedMovies200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMostLikedMovies(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get the most viewd movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMostViewedMovies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMostLikedMovies200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMostViewedMovies(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * obtain individual movie
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMovie(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMovie201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMovie(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update Movie
         * @param {number} id the id of the movie
         * @param {CreateMovieRequest} [createMovieRequest] updated movie data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMovie(id: number, createMovieRequest?: CreateMovieRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMovie201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMovie(id, createMovieRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MoviesApi - factory interface
 * @export
 */
export const MoviesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MoviesApiFp(configuration)
    return {
        /**
         * Create New Movie
         * @param {CreateMovieRequest} createMovieRequest movie data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMovie(createMovieRequest: CreateMovieRequest, options?: any): AxiosPromise<CreateMovie201Response> {
            return localVarFp.createMovie(createMovieRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * delete Movie
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMovie(id: number, options?: any): AxiosPromise<DeleteMovie200Response> {
            return localVarFp.deleteMovie(id, options).then((request) => request(axios, basePath));
        },
        /**
         * obtain movies (filtering)
         * @param {string} [title] the title of the movie
         * @param {Array<string>} [geners] an array containg the geners of the movie
         * @param {number} [page] how many pages
         * @param {number} [pageSize] how many movies in one page
         * @param {'title' | '-title' | 'id' | '-id - year' | '-year - runtime' | '-runtime'} [sort] sort the returned array movie depend on these params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMovies(title?: string, geners?: Array<string>, page?: number, pageSize?: number, sort?: 'title' | '-title' | 'id' | '-id - year' | '-year - runtime' | '-runtime', options?: any): AxiosPromise<MoviesResponse> {
            return localVarFp.getAllMovies(title, geners, page, pageSize, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * get the most liked movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMostLikedMovies(options?: any): AxiosPromise<GetMostLikedMovies200Response> {
            return localVarFp.getMostLikedMovies(options).then((request) => request(axios, basePath));
        },
        /**
         * get the most viewd movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMostViewedMovies(options?: any): AxiosPromise<GetMostLikedMovies200Response> {
            return localVarFp.getMostViewedMovies(options).then((request) => request(axios, basePath));
        },
        /**
         * obtain individual movie
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovie(id: number, options?: any): AxiosPromise<CreateMovie201Response> {
            return localVarFp.getMovie(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update Movie
         * @param {number} id the id of the movie
         * @param {CreateMovieRequest} [createMovieRequest] updated movie data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMovie(id: number, createMovieRequest?: CreateMovieRequest, options?: any): AxiosPromise<CreateMovie201Response> {
            return localVarFp.updateMovie(id, createMovieRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MoviesApi - object-oriented interface
 * @export
 * @class MoviesApi
 * @extends {BaseAPI}
 */
export class MoviesApi extends BaseAPI {
    /**
     * Create New Movie
     * @param {CreateMovieRequest} createMovieRequest movie data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public createMovie(createMovieRequest: CreateMovieRequest, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).createMovie(createMovieRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete Movie
     * @param {number} id the id of the movie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public deleteMovie(id: number, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).deleteMovie(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * obtain movies (filtering)
     * @param {string} [title] the title of the movie
     * @param {Array<string>} [geners] an array containg the geners of the movie
     * @param {number} [page] how many pages
     * @param {number} [pageSize] how many movies in one page
     * @param {'title' | '-title' | 'id' | '-id - year' | '-year - runtime' | '-runtime'} [sort] sort the returned array movie depend on these params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public getAllMovies(title?: string, geners?: Array<string>, page?: number, pageSize?: number, sort?: 'title' | '-title' | 'id' | '-id - year' | '-year - runtime' | '-runtime', options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).getAllMovies(title, geners, page, pageSize, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get the most liked movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public getMostLikedMovies(options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).getMostLikedMovies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get the most viewd movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public getMostViewedMovies(options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).getMostViewedMovies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * obtain individual movie
     * @param {number} id the id of the movie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public getMovie(id: number, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).getMovie(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update Movie
     * @param {number} id the id of the movie
     * @param {CreateMovieRequest} [createMovieRequest] updated movie data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public updateMovie(id: number, createMovieRequest?: CreateMovieRequest, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).updateMovie(id, createMovieRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TokensApi - axios parameter creator
 * @export
 */
export const TokensApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * create reset password token
         * @param {EmailObject} [emailObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResetPasswordToken: async (emailObject?: EmailObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tokens/reset-password-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * User login
         * @param {GetCurrentUser200Response} [getCurrentUser200Response] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signinUser: async (getCurrentUser200Response?: GetCurrentUser200Response, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tokens/authentication`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getCurrentUser200Response, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokensApi - functional programming interface
 * @export
 */
export const TokensApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokensApiAxiosParamCreator(configuration)
    return {
        /**
         * create reset password token
         * @param {EmailObject} [emailObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResetPasswordToken(emailObject?: EmailObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResetPasswordToken(emailObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * User login
         * @param {GetCurrentUser200Response} [getCurrentUser200Response] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signinUser(getCurrentUser200Response?: GetCurrentUser200Response, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signinUser(getCurrentUser200Response, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TokensApi - factory interface
 * @export
 */
export const TokensApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokensApiFp(configuration)
    return {
        /**
         * create reset password token
         * @param {EmailObject} [emailObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResetPasswordToken(emailObject?: EmailObject, options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.createResetPasswordToken(emailObject, options).then((request) => request(axios, basePath));
        },
        /**
         * User login
         * @param {GetCurrentUser200Response} [getCurrentUser200Response] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signinUser(getCurrentUser200Response?: GetCurrentUser200Response, options?: any): AxiosPromise<User> {
            return localVarFp.signinUser(getCurrentUser200Response, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TokensApi - object-oriented interface
 * @export
 * @class TokensApi
 * @extends {BaseAPI}
 */
export class TokensApi extends BaseAPI {
    /**
     * create reset password token
     * @param {EmailObject} [emailObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public createResetPasswordToken(emailObject?: EmailObject, options?: AxiosRequestConfig) {
        return TokensApiFp(this.configuration).createResetPasswordToken(emailObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * User login
     * @param {GetCurrentUser200Response} [getCurrentUser200Response] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    public signinUser(getCurrentUser200Response?: GetCurrentUser200Response, options?: AxiosRequestConfig) {
        return TokensApiFp(this.configuration).signinUser(getCurrentUser200Response, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * active user after a register
         * @param {ActivateUserRequest} [activateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateUser: async (activateUserRequest?: ActivateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/activated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(activateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retreive the current user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retreive a user with id
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Regisster user
         * @param {CreateUser} createUser Created user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (createUser: CreateUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUser' is not null or undefined
            assertParamExists('registerUser', 'createUser', createUser)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * signout user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signoutUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/signout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * active user after a register
         * @param {ActivateUserRequest} [activateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activateUser(activateUserRequest?: ActivateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCurrentUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activateUser(activateUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retreive the current user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCurrentUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retreive a user with id
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCurrentUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Regisster user
         * @param {CreateUser} createUser Created user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(createUser: CreateUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCurrentUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(createUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * signout user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signoutUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signoutUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * active user after a register
         * @param {ActivateUserRequest} [activateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateUser(activateUserRequest?: ActivateUserRequest, options?: any): AxiosPromise<GetCurrentUser200Response> {
            return localVarFp.activateUser(activateUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retreive the current user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any): AxiosPromise<GetCurrentUser200Response> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * Retreive a user with id
         * @param {number} id the id of the movie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: number, options?: any): AxiosPromise<GetCurrentUser200Response> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Regisster user
         * @param {CreateUser} createUser Created user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(createUser: CreateUser, options?: any): AxiosPromise<GetCurrentUser200Response> {
            return localVarFp.registerUser(createUser, options).then((request) => request(axios, basePath));
        },
        /**
         * signout user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signoutUser(options?: any): AxiosPromise<SuccessResponse> {
            return localVarFp.signoutUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * active user after a register
     * @param {ActivateUserRequest} [activateUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public activateUser(activateUserRequest?: ActivateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).activateUser(activateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retreive the current user data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getCurrentUser(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retreive a user with id
     * @param {number} id the id of the movie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(id: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Regisster user
     * @param {CreateUser} createUser Created user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public registerUser(createUser: CreateUser, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).registerUser(createUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * signout user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public signoutUser(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).signoutUser(options).then((request) => request(this.axios, this.basePath));
    }
}


